@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IServerApiService ServerApi
@inject ILogger<Index> Logger
@using System.Timers
@using System.Linq
@implements IDisposable

<PageTitle>7 Days to Die Server</PageTitle>

<h1>7 Days to Die</h1>

<!-- Server Info Display -->
<div class="server-info-container">
    <div class="server-time-display">
        <div class="time-info">
            <span class="time-icon @(IsDay ? "day" : "night")">@(IsDay ? "‚òÄÔ∏è" : "üåô")</span>
            <div class="time-details">
                <div class="game-time">@currentGameTime</div>
                <div class="game-day">Day @currentGameDay</div>
            </div>
        </div>
        <div class="server-version">@serverVersion</div>
    </div>
</div>

<div class="status @GetStatusCssClass()">
    <span class="status-indicator @GetStatusCssClass()"></span>
    <span class="status-text">@statusText.ToUpper()</span>
</div>

<div class="players-container">
    <div class="players-header">
        <span class="icon-user">üë§</span>
        <span>PLAYERS</span>
    </div>
    <ul class="players-list">
        @foreach (var player in allPlayers)
        {
            <li>
                <span class="status-indicator @(IsPlayerOnline(player.Name) ? "online" : "offline")"></span>
                @player.Name
            </li>
        }
    </ul>
</div>

@if (CanStartServer())
{
    <button class="start-server-btn" @onclick="StartServer" disabled="@IsStartingServer()">
        @(IsStartingServer() ? "Starting..." : "Start Server")
    </button>
}

<!-- Debug Panel -->
@if (IsDebugMode)
{
    @if (showDebugPanel)
    {
        <div class="debug-panel">
            <div class="debug-header">
                <h3>üõ†Ô∏è Debug Controls</h3>
                <button class="debug-close" @onclick="ToggleDebugPanel">√ó</button>
            </div>
            <div class="debug-controls">
                <div class="debug-control">
                    <label>
                        <input type="checkbox" @bind="debugUseBackendApi" @bind:after="UpdateDebugValues" /> Use Backend API
                    </label>
                </div>
                <div class="debug-control">
                    <label>
                        <input type="checkbox" @bind="debugServerOnline" @bind:after="UpdateDebugValues" /> Server Online
                    </label>
                </div>
                <div class="debug-control">
                    <label>In-Game Time:</label>
                    <input type="range" min="0" max="1439" step="1" @bind-value="debugInGameMinutes" @bind-value:event="oninput" @bind-value:after="UpdateDebugValues" />
                    <span>@DebugInGameTime</span>
                </div>
                <div class="debug-control">
                    <label>Time Scale:</label>
                    <input type="number" min="1" max="120" @bind="debugTimeScale" @bind:after="UpdateDebugValues" />
                </div>
                <div class="debug-control">
                    <label>Day Start Hour:</label>
                    <input type="number" min="0" max="23" @bind="debugDayStartHour" @bind:after="UpdateDebugValues" />
                </div>
                <div class="debug-control">
                    <label>Night Start Hour:</label>
                    <input type="number" min="0" max="23" @bind="debugNightStartHour" @bind:after="UpdateDebugValues" />
                </div>
            </div>
        </div>
    }
    else
    {
        <button class="debug-toggle" @onclick="ToggleDebugPanel">üõ†Ô∏è Show Debug Panel</button>
    }
}

@code {
    private string statusText = "Loading...";
    private List<string> players = new();
    private List<PlayerInfo> allPlayers = new();
    
    // VM status tracking
    private VmStatus? vmStatus;
    private bool isPollingVmStatus = false;
    
    // Server info properties
    private string currentGameTime = "00:00";
    private int currentGameDay = 1;
    private string serverVersion = "Loading...";
    private bool IsDay = true;
    
    // Server data
    private GameServerInfo? serverData;
    private Timer? gameTimer;
    private Timer? vmStatusTimer;
    private DateTime startTime = DateTime.UtcNow;
    
    // Debug panel properties (always available but only used in debug)
    private bool showDebugPanel = false;
    private bool debugUseBackendApi = true;
    private int debugInGameSeconds = 52320;
    private int debugTimeScale = 30;
    private int debugDayStartHour = 6;
    private int debugNightStartHour = 18;
    private bool debugServerOnline = true;

    private int debugInGameMinutes
    {
        get => debugInGameSeconds / 60;
        set => debugInGameSeconds = value * 60;
    }

    private string DebugInGameTime => $"{debugInGameSeconds / 3600:D2}:{(debugInGameSeconds % 3600) / 60:D2}";
    
    // Property to check if we're in debug mode
    private bool IsDebugMode
    {
        get
        {
#if DEBUG
            return true;
#else
            return false;
#endif
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load initial data
            await LoadInitialData();

            if (IsDebugMode)
            {
                debugServerOnline = GetServerOnlineStatus();
            }
            
            // Create a list of all known players with their status
            allPlayers = players.Select(playerName => new PlayerInfo 
            { 
                Name = playerName, 
                IsOnline = true // All players from GetPlayers() are currently online
            }).ToList();
            
            // Initialize server info display
            UpdateServerInfo();
            UpdateTheme();
            ApplyTheme(); // Apply initial theme
            
            // Start the game timer
            gameTimer = new Timer(1000); // Update every second
            gameTimer.Elapsed += OnTimerElapsed;
            gameTimer.Start();
            
            // Start VM status polling if needed
            if (ShouldPollVmStatus())
            {
                StartVmStatusPolling();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during component initialization");
            statusText = "Error loading data";
        }
    }

    private async Task LoadInitialData()
    {
        try
        {
            // In debug mode, check if we should use backend API
            if (IsDebugMode && !debugUseBackendApi)
            {
                await LoadFallbackData();
                return;
            }

            // Load VM status first to determine server state
            vmStatus = await ServerApi.GetVmStatusAsync();
            statusText = GetStatusFromVmState(vmStatus.VmState);

            // Only try to load game data if VM is running
            if (vmStatus.VmState == VmState.Running && vmStatus.GamePortOpen == true)
            {
                try
                {
                    serverData = await ServerApi.GetGameInfoAsync();
                    var playerInfos = await ServerApi.GetPlayersAsync();
                    players = playerInfos.Select(p => p.Name).ToList();
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Failed to load game data, server may be starting up");
                    // Server is booting - show empty data instead of fake data
                    await LoadEmptyData();
                }
            }
            else
            {
                // VM is not running or game port not open - show empty data
                await LoadEmptyData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to load data from API");
            // API unavailable - show empty data instead of fake data
            await LoadEmptyData();
        }
    }

    private async Task LoadFallbackData()
    {
        // Use the original hardcoded data as fallback
        statusText = "Offline";
        players = new List<string> { "Avarice", "Madmanmatt", "J3ster" };
        serverData = new GameServerInfo
        {
            InGameSeconds = 52320, // 14:32 in-game time
            InGameDay = 14,
            Version = "Alpha 21.1",
            ServerTimeUtc = DateTime.UtcNow,
            TimeScale = 30,
            DayStartHour = 6,
            NightStartHour = 18
        };
        await Task.Delay(100); // Simulate async operation
    }

    private async Task LoadEmptyData()
    {
        // Show empty data instead of fake data when server is unavailable or booting
        players = new List<string>();
        serverData = new GameServerInfo
        {
            InGameSeconds = 0,
            InGameDay = 0,
            Version = "N/A",
            ServerTimeUtc = DateTime.UtcNow,
            TimeScale = 30, // Keep reasonable defaults for calculations
            DayStartHour = 6,
            NightStartHour = 18
        };
        await Task.Delay(100); // Simulate async operation
    }

    private string GetStatusFromVmState(VmState vmState)
    {
        return vmState switch
        {
            VmState.Running => "Online",
            VmState.Starting => "Starting",
            VmState.Stopping => "Stopping",
            VmState.Stopped => "Offline",
            VmState.Deallocated => "Offline",
            VmState.Deallocating => "Stopping",
            _ => "Unknown"
        };
    }

    private bool GetServerOnlineStatus()
    {
        return vmStatus?.VmState == VmState.Running;
    }

    private bool ShouldPollVmStatus()
    {
        return vmStatus?.VmState is VmState.Starting or VmState.Stopping or VmState.Deallocating;
    }

    private void StartVmStatusPolling()
    {
        if (isPollingVmStatus) return;
        
        isPollingVmStatus = true;
        vmStatusTimer = new Timer(10000); // Poll every 10 seconds as per spec
        vmStatusTimer.Elapsed += OnVmStatusTimerElapsed;
        vmStatusTimer.Start();
        Logger.LogInformation("Started VM status polling");
    }

    private void StopVmStatusPolling()
    {
        if (!isPollingVmStatus) return;
        
        isPollingVmStatus = false;
        vmStatusTimer?.Stop();
        vmStatusTimer?.Dispose();
        vmStatusTimer = null;
        Logger.LogInformation("Stopped VM status polling");
    }

    private async void OnVmStatusTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        try
        {
            await InvokeAsync(async () =>
            {
                var newVmStatus = await ServerApi.GetVmStatusAsync();
                var oldState = vmStatus?.VmState;
                vmStatus = newVmStatus;
                statusText = GetStatusFromVmState(vmStatus.VmState);

                // If VM reached a stable state, stop polling
                if (!ShouldPollVmStatus())
                {
                    StopVmStatusPolling();
                    
                    // If VM just became running, try to load game data
                    if (vmStatus.VmState == VmState.Running && oldState != VmState.Running)
                    {
                        await LoadGameDataWhenReady();
                    }
                }

                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during VM status polling");
        }
    }

    private async Task LoadGameDataWhenReady()
    {
        // Give the game server some time to fully start up
        await Task.Delay(5000);
        
        try
        {
            if (vmStatus?.GamePortOpen == true)
            {
                serverData = await ServerApi.GetGameInfoAsync();
                var playerInfos = await ServerApi.GetPlayersAsync();
                players = playerInfos.Select(p => p.Name).ToList();
                
                allPlayers = players.Select(playerName => new PlayerInfo 
                { 
                    Name = playerName, 
                    IsOnline = true
                }).ToList();
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Game server not ready yet after VM start");
        }
    }
    
    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            UpdateServerInfo();
            UpdateTheme();
            StateHasChanged();
        });
    }
    
    private void UpdateServerInfo()
    {
        if (serverData == null) return;
        
        var elapsedRealSeconds = (DateTime.UtcNow - startTime).TotalSeconds;
        
        // Use debug values if in debug mode, otherwise use server data
        int currentInGameSeconds;
        if (IsDebugMode)
        {
            currentInGameSeconds = debugInGameSeconds + (int)(elapsedRealSeconds * debugTimeScale);
            currentGameDay = debugInGameSeconds / 86400 + 1; // Base day from initial seconds
        }
        else
        {
            currentInGameSeconds = serverData.InGameSeconds + (int)(elapsedRealSeconds * serverData.TimeScale);
            currentGameDay = serverData.InGameDay;
        }
        
        // Calculate time of day (0-86399 seconds in a day)
        var secondsInDay = currentInGameSeconds % 86400;
        var hours = secondsInDay / 3600;
        var minutes = (secondsInDay % 3600) / 60;
        
        currentGameTime = $"{hours:D2}:{minutes:D2}";
        serverVersion = serverData.Version;
        
        // Update day logic if we've passed midnight
        if (currentInGameSeconds > serverData.InGameSeconds)
        {
            currentGameDay = serverData.InGameDay + (currentInGameSeconds / 86400);
        }
    }
    
    private void UpdateTheme()
    {
        if (serverData == null) return;
        
        var elapsedRealSeconds = (DateTime.UtcNow - startTime).TotalSeconds;
        
        // Use debug values if in debug mode, otherwise use server data
        int currentInGameSeconds, dayStart, nightStart;
        if (IsDebugMode)
        {
            currentInGameSeconds = debugInGameSeconds + (int)(elapsedRealSeconds * debugTimeScale);
            dayStart = debugDayStartHour;
            nightStart = debugNightStartHour;
        }
        else
        {
            currentInGameSeconds = serverData.InGameSeconds + (int)(elapsedRealSeconds * serverData.TimeScale);
            dayStart = serverData.DayStartHour;
            nightStart = serverData.NightStartHour;
        }
        
        var secondsInDay = currentInGameSeconds % 86400;
        var currentHour = secondsInDay / 3600;
        
        var newIsDay = currentHour >= dayStart && currentHour < nightStart;
        
        if (newIsDay != IsDay)
        {
            IsDay = newIsDay;
            InvokeAsync(ApplyTheme);
        }
    }
    
    private void ApplyTheme()
    {
        var bodyClass = IsDay ? "theme-day" : "theme-night";
        // Use JavaScript interop to update the body class
        InvokeAsync(async () =>
        {
            await JSRuntime.InvokeVoidAsync("eval", 
                $"document.body.className = document.body.className.replace(/theme-\\w+/g, '').trim(); " +
                $"document.body.classList.add('{bodyClass}');");
        });
    }

    private bool IsPlayerOnline(string playerName)
    {
        return players.Contains(playerName);
    }

    private string GetStatusCssClass()
    {
        return statusText.ToLower() switch
        {
            "online" => "online",
            "starting" => "starting",
            "stopping" => "stopping",
            _ => "offline"
        };
    }

    private bool CanStartServer()
    {
        if (IsDebugMode && !debugServerOnline)
            return true;
        
        return vmStatus?.VmState is VmState.Stopped or VmState.Deallocated;
    }

    private bool IsStartingServer()
    {
        if (IsDebugMode)
            return false;
        
        return vmStatus?.VmState is VmState.Starting;
    }

    private async Task StartServer()
    {
        try
        {
            Logger.LogInformation("Starting VM via API");
            statusText = "Starting...";
            StateHasChanged();
            
            vmStatus = await ServerApi.StartVmAsync();
            statusText = GetStatusFromVmState(vmStatus.VmState);
            
            if (IsDebugMode)
            {
                debugServerOnline = vmStatus.VmState == VmState.Running;
            }
            
            // Start polling if VM is in a transitional state
            if (ShouldPollVmStatus())
            {
                StartVmStatusPolling();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to start server");
            statusText = "Error starting server";
            StateHasChanged();
        }
    }
    
    private void ToggleDebugPanel()
    {
        if (IsDebugMode)
        {
            showDebugPanel = !showDebugPanel;
        }
    }
    
    private async void UpdateDebugValues()
    {
        if (IsDebugMode)
        {
            // Reset start time to apply debug changes immediately
            startTime = DateTime.UtcNow;
            
            // Reload data if backend API toggle changed
            await LoadInitialData();
            
            // Update status based on debug settings if not using backend
            if (!debugUseBackendApi)
            {
                statusText = debugServerOnline ? "Online" : "Offline";
            }
            
            UpdateServerInfo();
            UpdateTheme();
            StateHasChanged();
        }
    }
    
    public void Dispose()
    {
        gameTimer?.Stop();
        gameTimer?.Dispose();
        StopVmStatusPolling();
    }
}
